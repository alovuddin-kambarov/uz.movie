package uz.coder.uzmovie.viewmodelsimport android.content.Contextimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport kotlinx.coroutines.launchimport uz.adkhamjon.promovie.models.Images.ImageModelimport uz.coder.uzmovie.models.MainClassimport uz.coder.uzmovie.networks.ApiClientimport uz.coder.uzmovie.repository.MovieRepositoryimport uz.coder.uzmovie.utils.NetworkHelperimport uz.coder.uzmovie.utils.Resourceclass MovieViewModel : ViewModel() {    private var movieRepository = MovieRepository(ApiClient.apiService)    private var liveData = MutableLiveData<Resource<ImageModel>>()    private var liveDataPopular = MutableLiveData<Resource<MainClass>>()    fun getPopularVideo(context: Context, page:Int): LiveData<Resource<MainClass>> {        viewModelScope.launch {            liveData.postValue(Resource.loading(null))            if (NetworkHelper(context).isNetworkConnected()) {                val videosImage = movieRepository.getPopularVideos(page)                if (videosImage.isSuccessful) {                    println("Hello: ${videosImage.raw()}")                    liveDataPopular.postValue(Resource.success(videosImage.body()))                } else                    liveDataPopular.postValue(Resource.error(videosImage.raw().toString(), null))            } else {                liveDataPopular.postValue(Resource.error("No internet connection", null))            }        }        return liveDataPopular    }    fun getSearchVideo(context: Context, q:String): LiveData<Resource<MainClass>> {        viewModelScope.launch {            liveData.postValue(Resource.loading(null))            if (NetworkHelper(context).isNetworkConnected()) {                val videosImage = movieRepository.getSearchMovies(q)                if (videosImage.isSuccessful) {                    println("Hello: ${videosImage.raw()}")                    liveDataPopular.postValue(Resource.success(videosImage.body()))                } else                    liveDataPopular.postValue(Resource.error(videosImage.raw().toString(), null))            } else {                liveDataPopular.postValue(Resource.error("No internet connection", null))            }        }        return liveDataPopular    }}